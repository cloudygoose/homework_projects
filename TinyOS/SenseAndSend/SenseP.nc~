#include <Timer.h>
#include "Message.h"

module SenseP
{
	uses{
		interface Boot;
		interface Leds;
		interface Read<uint16_t>;
		interface Timer<TMilli>;
		interface SplitControl as AMControl;
		interface Packet;
        interface AMSend;
        interface Read<uint16_t> as ReadSensor;
        interface Read<uint16_t> as Temperature;
        interface Read<uint16_t> as Humidity;
        interface Read<uint16_t> as Light;
        
        
	}
}


implementation
{
    message_t pkt;
    bool busy = FALSE;
    
	event void Boot.booted()
	{
        call AMControl.start();
	}

    event void AMControl.startDone(error_t error)
    {
        if(error == SUCCESS)
            call Timer.startPeriodic(SAMPLE_FREQUENCY);
        else
            call AMControl.start();
        

    }

    event void AMControl.stopDone(error_t error)
    {
    }
    
    
	event void Timer.fired()
	{
        //	call Read.read();
        call Temperature.read();
        call Humidity.read();
        call Light.read();
        
	}
    event void Read.readDone(error_t result, uint16_t data)
	{
    //     if(!busy)
    //     {
    //         if(result == SUCCESS)
    //         {
    //             MyMessage* mpkt = (MyMessage*)(call Packet.getPayload(&pkt, NULL));
    //             mpkt -> nodeid = TOS_NODE_ID;
    //             mpkt -> data = data;
    //             if(call AMSend.send(AM_BROADCAST_ADDR, &pkt, sizeof(MyMessage)) == SUCCESS)
    //                 busy = TRUE;
                
    //         }
    //     }
        
		
	}


    event void ReadSensor.readDone(error_t error, uint16_t data)
    {
    }
    
    event void Temperature.readDone(error_t error, uint16_t data)
    {

    }

    event void Humidity.readDone(error_t error, uint16_t data)
    {

    }

    event void Light.readDone(error_t error, uint16_t data)
    {

    }
    

    event void AMSend.sendDone(message_t* msg, error_t error)
    {
        if(&pkt == msg)
        {
            busy = FALSE;
            
            call Leds.led2Toggle();
            
        }
        
        

    }
    

}
